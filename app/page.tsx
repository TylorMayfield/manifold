"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import PageLayout from "../components/layout/PageLayout";
import CellButton from "../components/ui/CellButton";
import CellCard from "../components/ui/CellCard";
import CellModal from "../components/ui/CellModal";
import StatusBadge from "../components/ui/StatusBadge";
import ContextualActionBar from "../components/ui/ContextualActionBar";
import DataFlowIndicator from "../components/ui/DataFlowIndicator";
import { useDataSources } from "../contexts/DataSourceContext";
import { clientLogger } from "../lib/utils/ClientLogger";
import {
  Database,
  FileText,
  Zap,
  Settings,
  Plus,
  Play,
  Home,
  ArrowRight,
  Layers,
  Webhook,
  Command,
  BookOpen,
} from "lucide-react";

function HomePageContent() {
  const router = useRouter();
  const { dataSources, snapshots, addDataSource, addSnapshot } =
    useDataSources();
  const [creatingSnapshots, setCreatingSnapshots] = useState(false);

  // Check if any data sources are missing snapshots
  const sourcesWithoutSnapshots = dataSources.filter(
    (ds) => !snapshots.some((snap) => snap.dataSourceId === ds.id)
  );

  const createMissingSnapshots = async () => {
    if (sourcesWithoutSnapshots.length === 0) return;

    setCreatingSnapshots(true);
    try {
      for (const source of sourcesWithoutSnapshots) {
        clientLogger.info(
          "Creating auto-snapshot for data source",
          "data-processing",
          {
            sourceName: source.name,
            sourceId: source.id,
            sourceType: source.type,
          }
        );

        // Generate mock data for the source
        const { generateMockData } = await import(
          "../lib/utils/mockDataGenerator"
        );
        const templateId =
          source.type === "mock"
            ? source.config?.mockConfig?.templateId || "customers"
            : "generic";
        const recordCount =
          source.type === "mock"
            ? source.config?.mockConfig?.recordCount || 1000
            : 100;

        const mockSnapshot = generateMockData(templateId, recordCount);

        if (!mockSnapshot.data || mockSnapshot.data.length === 0) {
          clientLogger.error(
            "Generated data is empty, skipping snapshot",
            "data-processing",
            {
              sourceName: source.name,
              templateId,
              recordCount,
            }
          );
          continue;
        }

        clientLogger.info(
          "Mock data generated for snapshot",
          "data-processing",
          {
            sourceName: source.name,
            recordCount: mockSnapshot.data.length,
            templateId,
          }
        );

        // Create snapshot via API
        const response = await fetch("/api/snapshots", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            projectId: "default",
            dataSourceId: source.id,
            data: mockSnapshot.data,
            schema: mockSnapshot.schema,
            metadata: {
              ...mockSnapshot.metadata,
              autoGenerated: true,
              dataSourceName: source.name,
              dataSourceType: source.type,
            },
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          clientLogger.error(
            "Snapshot creation API failed",
            "data-processing",
            {
              sourceName: source.name,
              httpStatus: response.status,
              error: errorText,
            }
          );
          // Continue with other sources even if one fails
          continue;
        }

        const result = await response.json();
        clientLogger.success(
          "Auto-snapshot created successfully",
          "data-processing",
          {
            sourceName: source.name,
            snapshotId: result.id,
            version: result.version,
            recordCount: result.recordCount,
          }
        );
      }

      // Snapshots created; prefer letting context refresh update UI without reloading
      clientLogger.info("All auto-snapshots created", "data-processing", {
        count: sourcesWithoutSnapshots.length,
      });
    } catch (error) {
      clientLogger.error("Auto-snapshot creation failed", "data-processing", {
        error: error instanceof Error ? error.message : String(error),
      });
      alert(
        `Failed to create snapshots: ${
          error instanceof Error ? error.message : "Unknown error"
        }. Check Observability logs for details.`
      );
    } finally {
      setCreatingSnapshots(false);
    }
  };

  // Removed auto-create on mount to avoid unexpected background imports

  return (
    <PageLayout
      title="Manifold ETL"
      subtitle="Data Pipeline Management"
      icon={Home}
      showNavigation={true}
    >
      {/* Quick Tip */}
      <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-blue-50 border-2 border-purple-300 rounded-lg shadow-[2px_2px_0px_0px_rgba(147,51,234,0.2)]">
        <div className="flex items-center gap-3">
          <Command className="w-5 h-5 text-purple-600" />
          <div className="flex-1">
            <p className="text-sm font-bold font-mono text-gray-900">
              Quick Tip: Press{" "}
              <kbd className="px-2 py-1 bg-white border-2 border-purple-400 rounded font-mono text-xs">
                Cmd+K
              </kbd>{" "}
              or{" "}
              <kbd className="px-2 py-1 bg-white border-2 border-purple-400 rounded font-mono text-xs">
                Ctrl+K
              </kbd>{" "}
              to open the command palette
            </p>
            <p className="text-xs text-gray-600 mt-1">
              Navigate quickly to any part of the application
            </p>
          </div>
        </div>
      </div>

      {/* Data Flow Overview */}
      {dataSources.length > 0 && (
        <CellCard className="p-6 mb-6">
          <h2 className="text-subheading mb-4 text-gray-900 font-bold">
            Your Data Flow
          </h2>
          <DataFlowIndicator
            steps={[
              {
                id: "sources",
                type: "data-source",
                label: "Data Sources",
                status: dataSources.length > 0 ? "completed" : "pending",
                count: dataSources.length,
                href: "/data",
              },
              {
                id: "snapshots",
                type: "snapshot",
                label: "Snapshots",
                status: snapshots.length > 0 ? "completed" : "pending",
                count: snapshots.length,
                href: "/snapshots",
              },
              {
                id: "pipelines",
                type: "pipeline",
                label: "Pipelines",
                status: "pending",
                count: 0,
                href: "/pipelines",
              },
              {
                id: "lakes",
                type: "data-lake",
                label: "Data Lakes",
                status: "pending",
                count: 0,
                href: "/data-lakes",
              },
            ]}
            variant="horizontal"
            interactive={true}
          />
        </CellCard>
      )}

      {/* Contextual Actions */}
      <ContextualActionBar
        title={
          dataSources.length === 0
            ? "Let's get started!"
            : "What would you like to do next?"
        }
        subtitle={
          dataSources.length === 0
            ? "Add your first data source to begin"
            : undefined
        }
        variant="compact"
        className="mb-6"
        actions={[
          {
            label: "Add Data Source",
            icon: Plus,
            href: "/add-data-source",
            variant: "primary",
          },
          {
            label: "Data Dictionary",
            icon: BookOpen,
            href: "/dictionary",
          },
          {
            label: "View Pipelines",
            icon: Zap,
            href: "/pipelines",
            disabled: dataSources.length === 0,
            disabledReason: "Add data sources first",
          },
          {
            label: "View Data Lakes",
            icon: Layers,
            href: "/data-lakes",
            disabled: dataSources.length === 0,
            disabledReason: "Add data sources first",
          },
        ]}
      />

      {/* Dashboard Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Data Sources */}
        <CellCard className="p-6">
          <h2 className="text-subheading mb-4 flex items-center">
            <Database className="w-5 h-5 mr-2" />
            Data Sources ({dataSources.length})
          </h2>

          {dataSources.length === 0 ? (
            <div className="text-center py-8">
              <Database className="w-12 h-12 mx-auto mb-4 text-gray-600" />
              <p className="font-mono text-sm mb-4 text-gray-700">
                No data sources configured
              </p>
              <p className="text-caption mb-6 text-gray-600">
                Add your first data source to get started
              </p>
            </div>
          ) : (
            <div className="space-y-3 mb-6">
              {dataSources.slice(0, 3).map((source) => (
                <div
                  key={source.id}
                  className="p-3 border border-gray-300 bg-white cursor-pointer hover:border-blue-500 hover:shadow-md transition-all group rounded-lg"
                  onClick={() => router.push(`/data?source=${source.id}`)}
                  role="button"
                  tabIndex={0}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" || e.key === " ") {
                      e.preventDefault();
                      router.push(`/data?source=${source.id}`);
                    }
                  }}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <p className="font-mono text-sm font-bold text-gray-900 group-hover:text-blue-600 transition-colors">
                        {source.name}
                      </p>
                      <p className="text-caption text-gray-500">
                        {source.type}
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      <StatusBadge
                        status={
                          source.status === "completed"
                            ? "completed"
                            : source.status === "running"
                            ? "pending"
                            : source.status === "error"
                            ? "failed"
                            : "paused"
                        }
                        label={source.status}
                      />
                      <ArrowRight className="w-4 h-4 text-gray-600 group-hover:text-blue-400 group-hover:translate-x-1 transition-all" />
                    </div>
                  </div>
                </div>
              ))}
              {dataSources.length > 3 && (
                <button
                  onClick={() => router.push("/data")}
                  className="text-caption text-center text-gray-500 hover:text-blue-400 hover:underline w-full py-2 cursor-pointer transition-colors font-mono"
                >
                  +{dataSources.length - 3} more sources • View all
                </button>
              )}
            </div>
          )}

          <div className="space-y-2">
            <CellButton
              className="w-full"
              variant="primary"
              onClick={() => router.push("/add-data-source")}
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Data Source
            </CellButton>
          </div>
        </CellCard>

        {/* Pipelines */}
        <CellCard className="p-6">
          <h2 className="text-subheading mb-4 flex items-center">
            <Zap className="w-5 h-5 mr-2" />
            Pipelines
          </h2>

          <div className="text-center py-8">
            <Zap className="w-12 h-12 mx-auto mb-4 text-gray-600" />
            <p className="font-mono text-sm mb-4 text-gray-600">
              No pipelines created
            </p>
            <p className="text-caption mb-6 text-gray-500">
              Create data transformation pipelines
            </p>
          </div>

          <CellButton
            className="w-full"
            variant={dataSources.length > 0 ? "primary" : "secondary"}
            disabled={dataSources.length === 0}
            onClick={() => router.push("/pipelines")}
          >
            <Plus className="w-4 h-4 mr-2" />
            {dataSources.length > 0
              ? "Build Pipeline"
              : "Build Pipeline (Add data sources first)"}
          </CellButton>
        </CellCard>

        {/* Jobs */}
        <CellCard className="p-6">
          <h2 className="text-subheading mb-4 flex items-center">
            <Play className="w-5 h-5 mr-2" />
            Scheduled Jobs
          </h2>

          <div className="text-center py-8">
            <Play className="w-12 h-12 mx-auto mb-4 text-gray-600" />
            <p className="font-mono text-sm mb-4 text-gray-600">
              No jobs scheduled
            </p>
            <p className="text-caption mb-6 text-gray-500">
              Automate your data processing
            </p>
          </div>

          <CellButton className="w-full" variant="secondary" disabled>
            Schedule Job
            <span className="text-caption ml-2 text-gray-500">
              (Create pipelines first)
            </span>
          </CellButton>
        </CellCard>
      </div>

      {/* Data Snapshots */}
      <CellCard className="p-6">
        <h2 className="text-subheading mb-4 flex items-center">
          <FileText className="w-5 h-5 mr-2" />
          Data Snapshots ({snapshots.length})
        </h2>

        {snapshots.length === 0 ? (
          <div className="text-center py-12">
            <FileText className="w-16 h-16 mx-auto mb-4 text-gray-600" />
            <p className="font-mono text-lg mb-2 text-gray-600">
              No data imported yet
            </p>
            <p className="text-caption mb-8 max-w-md mx-auto text-gray-500">
              Data snapshots will appear here when you import data from your
              sources. Each import creates a versioned snapshot that you can
              compare and rollback.
            </p>
          </div>
        ) : (
          <div className="space-y-4 mb-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {snapshots.slice(0, 6).map((snapshot) => {
                const dataSource = dataSources.find(
                  (ds) => ds.id === snapshot.dataSourceId
                );
                return (
                  <div
                    key={snapshot.id}
                    className="p-4 border border-gray-300 bg-white rounded-lg hover:border-blue-500 hover:shadow-md transition-all cursor-pointer"
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div>
                        <p className="font-mono text-sm font-bold text-gray-900">
                          {dataSource?.name || "Unknown Source"}
                        </p>
                        <p className="text-caption text-gray-500">
                          v{snapshot.version}
                        </p>
                      </div>
                      <span className="px-2 py-1 text-xs font-mono bg-blue-50 text-blue-700 border border-blue-300 rounded">
                        {snapshot.recordCount} rows
                      </span>
                    </div>
                    <p className="text-caption text-gray-500">
                      {new Date(snapshot.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                );
              })}
            </div>
            {snapshots.length > 6 && (
              <div className="text-center">
                <button
                  onClick={() => router.push("/snapshots")}
                  className="px-4 py-2 border border-gray-300 bg-white text-gray-900 hover:border-blue-500 hover:text-blue-600 rounded-md font-mono text-sm transition-colors"
                >
                  View all {snapshots.length} snapshots
                </button>
              </div>
            )}
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-2xl mx-auto">
          <div className="bg-white border border-gray-300 p-4 text-center rounded-lg hover:border-blue-500 hover:shadow-md transition-all">
            <FileText className="w-8 h-8 mx-auto mb-2 text-blue-600" />
            <p className="font-mono text-sm font-bold text-gray-900">
              CSV Files
            </p>
            <p className="text-caption text-gray-600">Import structured data</p>
          </div>

          <div className="bg-white border border-gray-300 p-4 text-center rounded-lg hover:border-green-500 hover:shadow-md transition-all">
            <Database className="w-8 h-8 mx-auto mb-2 text-green-600" />
            <p className="font-mono text-sm font-bold text-gray-900">
              Database
            </p>
            <p className="text-caption text-gray-600">Connect to live data</p>
          </div>

          <div className="bg-white border border-gray-300 p-4 text-center rounded-lg hover:border-yellow-500 hover:shadow-md transition-all">
            <Zap className="w-8 h-8 mx-auto mb-2 text-yellow-600" />
            <p className="font-mono text-sm font-bold text-gray-900">
              Mock Data
            </p>
            <p className="text-caption text-gray-600">Generate test datasets</p>
          </div>
        </div>
      </CellCard>

      {/* Quick Start Guide */}
      <div className="mt-8">
        <CellCard className="p-6">
          <h2 className="text-subheading mb-4 text-gray-900">
            Getting Started with ETL
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="w-12 h-12 mx-auto mb-3 bg-blue-600 text-white border border-blue-700 shadow-sm flex items-center justify-center font-bold text-xl rounded-lg">
                1
              </div>
              <h3 className="font-bold mb-2 text-gray-900">Add Data Sources</h3>
              <p className="text-caption mb-3 text-gray-600">
                Import CSV files, connect to databases, or generate mock data
              </p>
              <CellButton
                size="sm"
                variant="accent"
                onClick={() => router.push("/add-data-source")}
              >
                <Plus className="w-4 h-4 mr-2" />
                Add Source
              </CellButton>
            </div>

            <div className="text-center opacity-40">
              <div className="w-12 h-12 mx-auto mb-3 bg-gray-700 text-gray-600 border-2 border-gray-600 shadow-cell flex items-center justify-center font-bold text-xl rounded-lg">
                2
              </div>
              <h3 className="font-mono font-bold mb-2 text-gray-600">
                Build Pipelines
              </h3>
              <p className="text-caption mb-3 text-gray-600">
                Create transformation steps to clean and merge data
              </p>
              <CellButton size="sm" variant="secondary" disabled>
                Build Pipeline
              </CellButton>
            </div>

            <div className="text-center opacity-40">
              <div className="w-12 h-12 mx-auto mb-3 bg-gray-700 text-gray-600 border-2 border-gray-600 shadow-cell flex items-center justify-center font-bold text-xl rounded-lg">
                3
              </div>
              <h3 className="font-mono font-bold mb-2 text-gray-600">
                Schedule Jobs
              </h3>
              <p className="text-caption mb-3 text-gray-600">
                Automate your data processing with cron schedules
              </p>
              <CellButton size="sm" variant="secondary" disabled>
                Schedule Job
              </CellButton>
            </div>

            <div className="text-center opacity-40">
              <div className="w-12 h-12 mx-auto mb-3 bg-gray-700 text-gray-600 border-2 border-gray-600 shadow-cell flex items-center justify-center font-bold text-xl rounded-lg">
                4
              </div>
              <h3 className="font-mono font-bold mb-2 text-gray-600">
                Export Data
              </h3>
              <p className="text-caption mb-3 text-gray-600">
                Send processed data to files, APIs, or databases
              </p>
              <CellButton size="sm" variant="secondary" disabled>
                Export Data
              </CellButton>
            </div>
          </div>
        </CellCard>
      </div>
    </PageLayout>
  );
}

export default function HomePage() {
  return <HomePageContent />;
}
