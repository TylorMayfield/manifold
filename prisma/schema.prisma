// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/core.db"
}

// Core Application Models - Stored in main SQLite database
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dataPath    String   // Path to project-specific SQLite database
  
  // Relations
  dataSources     DataSource[]
  backups         Backup[]
  jobs            Job[]
  consolidatedModels ConsolidatedModel[]
  
  @@map("projects")
}

model DataSource {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  type        String   // file, api, database, etc.
  config      String   // JSON configuration
  status      String   @default("pending") // pending, active, error
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSyncAt  DateTime?
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  snapshots   Snapshot[]
  relationships Relationship[] @relation("DataSourceRelationships")
  targetRelationships Relationship[] @relation("TargetRelationships")
  
  @@map("data_sources")
}

model Snapshot {
  id           String   @id @default(cuid())
  dataSourceId String
  projectId    String
  data         String   // JSON data
  metadata     String?  // JSON metadata
  recordCount  Int      @default(0)
  createdAt    DateTime @default(now())
  
  // Relations
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  
  @@map("snapshots")
}

model Relationship {
  id               String   @id @default(cuid())
  projectId        String
  sourceId         String
  targetId         String
  relationshipType String   // one-to-one, one-to-many, many-to-many
  metadata         String?  // JSON metadata
  createdAt        DateTime @default(now())
  
  // Relations
  source DataSource @relation("DataSourceRelationships", fields: [sourceId], references: [id], onDelete: Cascade)
  target DataSource @relation("TargetRelationships", fields: [targetId], references: [id], onDelete: Cascade)
  
  @@map("relationships")
}

model ConsolidatedModel {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  modelData   String   // JSON model data
  metadata    String?  // JSON metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("consolidated_models")
}

// Backup and Job Management
model Backup {
  id               String   @id @default(cuid())
  projectId        String
  type             String   // local, s3, etc.
  description      String?
  status           String   @default("pending") // pending, completed, failed
  filePath         String?
  size             Int      @default(0)
  dataSourceCount  Int      @default(0)
  snapshotCount    Int      @default(0)
  totalRecords     Int      @default(0)
  createdAt        DateTime @default(now())
  completedAt      DateTime?
  error            String?
  
  // Relations
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("backups")
}

model Job {
  id          String   @id @default(cuid())
  projectId   String?
  type        String   // backup, import, export, sync, etc.
  status      String   @default("pending") // pending, running, completed, failed, cancelled
  progress    Int      @default(0) // 0-100
  description String?
  config      String?  // JSON configuration
  result      String?  // JSON result data
  error       String?
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  executions  JobExecution[]
  
  @@map("jobs")
}

model JobExecution {
  id          String   @id @default(cuid())
  jobId       String
  status      String   @default("pending") // pending, running, completed, failed, cancelled
  progress    Int      @default(0) // 0-100
  currentStep String?
  result      String?  // JSON result data
  error       String?
  retryCount  Int      @default(0)
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?     // Duration in milliseconds
  
  // Relations
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  logs        JobLog[]
  
  @@map("job_executions")
}

model JobLog {
  id           String   @id @default(cuid())
  executionId  String
  level        String   // debug, info, warn, error, success
  message      String
  details      String?  // JSON details
  source       String?  // Source component/function
  createdAt    DateTime @default(now())
  
  // Relations
  execution    JobExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  
  @@map("job_logs")
}

// Application Settings and Configuration
model AppSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("app_settings")
}

// Application-wide logging
model AppLog {
  id          String   @id @default(cuid())
  level       String   // debug, info, warn, error, success
  category    String   // api, database, backup, import, etc.
  message     String
  details     String?  // JSON details
  source      String?  // Source component/function
  projectId   String?  // Optional project context
  dataSourceId String? // Optional data source context
  createdAt   DateTime @default(now())
  
  @@map("app_logs")
}

// Import History and Tracking
model ImportHistory {
  id           String   @id @default(cuid())
  projectId    String
  dataSourceId String
  fileName     String?
  recordCount  Int      @default(0)
  status       String   @default("pending") // pending, completed, failed
  error        String?
  createdAt    DateTime @default(now())
  completedAt  DateTime?
  
  @@map("import_history")
}