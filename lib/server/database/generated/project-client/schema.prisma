// Project-specific database schema
// This schema is used for individual project databases

generator client {
  provider = "prisma-client-js"
  output   = "../lib/database/generated/project-client"
}

datasource db {
  provider = "sqlite"
  url      = env("PROJECT_DATABASE_URL")
}

// Project-specific data models
model DataSource {
  id         String    @id @default(cuid())
  name       String
  type       String // file, api, database, etc.
  config     String // JSON configuration
  status     String    @default("pending") // pending, active, error
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastSyncAt DateTime?

  // Relations
  snapshots           Snapshot[]
  relationships       Relationship[] @relation("DataSourceRelationships")
  targetRelationships Relationship[] @relation("TargetRelationships")

  @@map("data_sources")
}

model Snapshot {
  id           String   @id @default(cuid())
  dataSourceId String
  data         String // JSON data
  metadata     String? // JSON metadata
  recordCount  Int      @default(0)
  createdAt    DateTime @default(now())

  // Relations
  dataSource DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)

  @@map("snapshots")
}

model Relationship {
  id               String   @id @default(cuid())
  sourceId         String
  targetId         String
  relationshipType String // one-to-one, one-to-many, many-to-many
  metadata         String? // JSON metadata
  createdAt        DateTime @default(now())

  // Relations
  source DataSource @relation("DataSourceRelationships", fields: [sourceId], references: [id], onDelete: Cascade)
  target DataSource @relation("TargetRelationships", fields: [targetId], references: [id], onDelete: Cascade)

  @@map("relationships")
}

model ConsolidatedModel {
  id        String   @id @default(cuid())
  name      String
  modelData String // JSON model data
  metadata  String? // JSON metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("consolidated_models")
}

// Import tracking for this project
model ImportHistory {
  id           String    @id @default(cuid())
  dataSourceId String
  fileName     String?
  recordCount  Int       @default(0)
  status       String    @default("pending") // pending, completed, failed
  error        String?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?

  @@map("import_history")
}
