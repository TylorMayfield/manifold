
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.DataSourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  config: 'config',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastSyncAt: 'lastSyncAt'
};

exports.Prisma.SnapshotScalarFieldEnum = {
  id: 'id',
  dataSourceId: 'dataSourceId',
  data: 'data',
  metadata: 'metadata',
  recordCount: 'recordCount',
  createdAt: 'createdAt'
};

exports.Prisma.RelationshipScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  relationshipType: 'relationshipType',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ConsolidatedModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  modelData: 'modelData',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImportHistoryScalarFieldEnum = {
  id: 'id',
  dataSourceId: 'dataSourceId',
  fileName: 'fileName',
  recordCount: 'recordCount',
  status: 'status',
  error: 'error',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  DataSource: 'DataSource',
  Snapshot: 'Snapshot',
  Relationship: 'Relationship',
  ConsolidatedModel: 'ConsolidatedModel',
  ImportHistory: 'ImportHistory'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/tylormayfield/manifold/lib/database/generated/project-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/tylormayfield/manifold/prisma/project-schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "PROJECT_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Project-specific database schema\n// This schema is used for individual project databases\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/database/generated/project-client\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"PROJECT_DATABASE_URL\")\n}\n\n// Project-specific data models\nmodel DataSource {\n  id         String    @id @default(cuid())\n  name       String\n  type       String // file, api, database, etc.\n  config     String // JSON configuration\n  status     String    @default(\"pending\") // pending, active, error\n  createdAt  DateTime  @default(now())\n  updatedAt  DateTime  @updatedAt\n  lastSyncAt DateTime?\n\n  // Relations\n  snapshots           Snapshot[]\n  relationships       Relationship[] @relation(\"DataSourceRelationships\")\n  targetRelationships Relationship[] @relation(\"TargetRelationships\")\n\n  @@map(\"data_sources\")\n}\n\nmodel Snapshot {\n  id           String   @id @default(cuid())\n  dataSourceId String\n  data         String // JSON data\n  metadata     String? // JSON metadata\n  recordCount  Int      @default(0)\n  createdAt    DateTime @default(now())\n\n  // Relations\n  dataSource DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)\n\n  @@map(\"snapshots\")\n}\n\nmodel Relationship {\n  id               String   @id @default(cuid())\n  sourceId         String\n  targetId         String\n  relationshipType String // one-to-one, one-to-many, many-to-many\n  metadata         String? // JSON metadata\n  createdAt        DateTime @default(now())\n\n  // Relations\n  source DataSource @relation(\"DataSourceRelationships\", fields: [sourceId], references: [id], onDelete: Cascade)\n  target DataSource @relation(\"TargetRelationships\", fields: [targetId], references: [id], onDelete: Cascade)\n\n  @@map(\"relationships\")\n}\n\nmodel ConsolidatedModel {\n  id        String   @id @default(cuid())\n  name      String\n  modelData String // JSON model data\n  metadata  String? // JSON metadata\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"consolidated_models\")\n}\n\n// Import tracking for this project\nmodel ImportHistory {\n  id           String    @id @default(cuid())\n  dataSourceId String\n  fileName     String?\n  recordCount  Int       @default(0)\n  status       String    @default(\"pending\") // pending, completed, failed\n  error        String?\n  createdAt    DateTime  @default(now())\n  completedAt  DateTime?\n\n  @@map(\"import_history\")\n}\n",
  "inlineSchemaHash": "595606780820c601e1533cba14d19897c648ae29c2ed4f55a94b4e80d0155149",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"DataSource\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSyncAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"snapshots\",\"kind\":\"object\",\"type\":\"Snapshot\",\"relationName\":\"DataSourceToSnapshot\"},{\"name\":\"relationships\",\"kind\":\"object\",\"type\":\"Relationship\",\"relationName\":\"DataSourceRelationships\"},{\"name\":\"targetRelationships\",\"kind\":\"object\",\"type\":\"Relationship\",\"relationName\":\"TargetRelationships\"}],\"dbName\":\"data_sources\"},\"Snapshot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dataSourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dataSource\",\"kind\":\"object\",\"type\":\"DataSource\",\"relationName\":\"DataSourceToSnapshot\"}],\"dbName\":\"snapshots\"},\"Relationship\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relationshipType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"source\",\"kind\":\"object\",\"type\":\"DataSource\",\"relationName\":\"DataSourceRelationships\"},{\"name\":\"target\",\"kind\":\"object\",\"type\":\"DataSource\",\"relationName\":\"TargetRelationships\"}],\"dbName\":\"relationships\"},\"ConsolidatedModel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"modelData\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"consolidated_models\"},\"ImportHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dataSourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"import_history\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    PROJECT_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['PROJECT_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.PROJECT_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

